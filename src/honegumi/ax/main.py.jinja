from ax.service.ax_client import AxClient
from ax.utils.measurement.synthetic_functions import branin

{% if objective == "multi" -%}
from ax.service.utils.instantiation import ObjectiveProperties
{%- endif %}

{% if use_custom_gen -%}
from ax.modelbridge.factory import Models
from ax.modelbridge.generation_strategy import GenerationStep, GenerationStrategy
{%- endif %}

{% if use_existing_data -%}
import pandas as pd
import numpy as np
{% endif %}

{% if use_existing_data -%}
# Define the training data
X_train = np.array([
    [-3.0, 2.0],
    [0.0, 7.0],
    [3.0, 5.0],
    [5.0, 0.0],
    [10.0, 10.0]
])

# Convert to a DataFrame for easier manipulation
X_train = pd.DataFrame(X_train, columns=["x1", "x2"])

# Define the number of training examples
n_train = len(X_train)
 {% endif %}

{% if objective == "multi" -%}
obj1_name = "branin"
obj2_name = "neg_branin"

def branin_moo(x1, x2):
    """Multi-objective branin function

    The first objective is the normal branin value and the second
    objective is the negative branin value.
    """
    return {obj1_name: branin(x1, x2), obj2_name: -branin(x1, x2)}
{%- endif %}

{% if use_custom_gen -%}
gs = GenerationStrategy(
    steps=[
        GenerationStep(
            model=Models.SOBOL,
            num_trials=5,
            min_trials_observed=3,
            max_parallelism=5,
            model_kwargs={"seed": 999},
            model_gen_kwargs={},
        ),
        GenerationStep(
            model=Models.{{ model }},
            num_trials=-1,
            max_parallelism=3,
            model_kwargs={{ model_kwargs }},
        ),
    ]
)
{%- endif %}

ax_client = AxClient({% if use_custom_gen %}generation_strategy=gs{% endif %})
ax_client.create_experiment(
    parameters=[
        {"name": "x1", "type": "range", "bounds": [-5.0, 10.0]},
        {"name": "x2", "type": "range", "bounds": [0.0, 10.0]},
        {% if use_categorical %}
                {
                    "name": "gain",
                    "type": "choice",
                    "is_ordered": False,
                    "values": [""]
                },
        {% endif %}
    ],
{% if objective == "multi" -%}
    objectives={
        obj1_name: ObjectiveProperties(minimize=True, threshold=None),
        obj2_name: ObjectiveProperties(minimize=True, threshold=None),
    },
{% else %}
    objective_name="branin",
    minimize=True,
{%- endif %}
{% if use_constraint %}
    parameter_constraints=[
        "x1 + x2 <= 20.0", # sum constraint example
        "x1 < x2", # order constraint example
        "1.0 * x1 + 0.5 * x2 <= 10.0", # linear constraint example
        ],
{% endif %}
)

{% if use_existing_data -%}
# Add existing data to the AxClient
for i in range(n_train):
    ax_client.attach_trial(X_train.iloc[i, :-1].to_dict())
    ax_client.complete_trial(trial_index=i, raw_data=y_train[i])
{%- endif %}

for _ in range(10):
    parameters, trial_index = ax_client.get_next_trial()
    results = branin{% if objective == "multi" %}_moo{% endif %}(
        parameters["x1"], parameters["x2"]
        )
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

{% if objective == "multi" -%}
pareto_results = ax_client.get_pareto_optimal_parameters()
{% else %}
best_parameters, metrics = ax_client.get_best_parameters()
{%- endif %}
