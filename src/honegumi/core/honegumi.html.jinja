<!DOCTYPE html>
<html>

<head>
    <title>Interactive Grid Example</title>
    <style>
        input[type="radio"] {
            opacity: 0;
            position: absolute;
            width: 0;
            height: 0;
        }

        form {
            display: inline-flex;
            flex-direction: column;
        }

        .row {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            background-color: #f2f2f2;
            border: 0px solid #ccc;
        }

        .row label {
            display: inline-block;
            border: 1px solid #ccc;
            padding: 5px;
            cursor: pointer;
            background-color: #f2f2f2;
            text-align: center;
        }

        input[type="radio"]:checked+label {
            background-color: #b1b1b1;
        }
    </style>
    <link rel="stylesheet" href="_static/prism/prism.css">
</head>

<body onload="updateText()">
    <script>
        var optionRows = {{ jinja_option_rows|tojson }};
        // E.g.,
        // var optionRows = [
        //     { "name": "row1", "options": ["A", "B"] },
        //     { "name": "row2", "options": ["C", "D", "E"] },
        //     { "name": "row3", "options": ["F", "G"] }
        // ];

        var scriptLookup = {{ script_lookup|tojson }};
        // E.g.,
        // var lookup = {
        //     "A,C,F": "ACF",
        //     "A,C,G": "INVALID",
        //     "A,D,F": "ADF",
        //     "A,D,G": "ADG",
        //     "A,E,F": "AEF",
        //     "A,E,G": "AEG",
        //     "B,C,F": "BCF",
        //     "B,C,G": "BCG",
        //     "B,D,F": "INVALID",
        //     "B,D,G": "BDG",
        //     "B,E,F": "INVALID",
        //     "B,E,G": "BEG"
        // };

        var preambleLookup = {{ preamble_lookup|tojson }};

        var invalidConfigs = {{ invalid_configs|tojson }};
        // E.g.,
        // var invalidConfigs = [
        //     ["B", "D", "F"],
        //     ["B", "E", "F"],
        //     ["A", "C", "G"]
        // ];
    </script>
    <form>
        <div class="row">
            <img src="_static/logo.png" alt="Logo" style="height: 2em; margin-right: 1em;">
            <h2>Honegumi</h2>
        </div>
        {% for row in jinja_option_rows %}
        <div class="row">
            <label style="width: 20ch; pointer-events: none; cursor: default; text-align: left; border: none; border-left: 3px solid #868686;">
                {{row.name}}:
            </label>
            {% for option in row.options %}
            <input type="radio" id="{{ option }}" name="{{ row.name }}" value="{{ option }}"{% if
                option==row.options[0] %} checked{% endif %} onclick="updateText()">
            <label for="{{ option }}" style="flex-basis: {{ 100 / row.options|length }}%">{{ option }}</label>
            {% endfor %}
        </div>
        {% endfor %}
        <div class="row">
            <p id="preamble"></p>
        </div>
        <div class="row">
        <pre class="language-python" style="width: 88ch; overflow: auto; font-size: 12px;">
            <code id="text" style="border: none;"></code>
        </pre>
        </div>
        {# <div style="white-space: pre-wrap;">
            <textarea id="text" style="min-width: 88ch; min-height: 50em;"></textarea>
        </div> #}
    </form>
    <script>
        function updateText() {
            var rows = document.querySelectorAll('input[type="radio"]:checked');
            // Remove strikethrough formatting from all labels except for the selected radio button's label
            // While not strictly necessary, it prevents a possible "disappear/appear" effect
            var labels = document.querySelectorAll('label');
            labels.forEach(function (label) {
                if (label.htmlFor !== rows.id) {
                    label.innerHTML = label.textContent;
                }
            });
            var key = Array.from(rows, function (row) { return row.value; }).join(',');
            var rendered = scriptLookup[key];
            var preamble = preambleLookup[key];

            // Update the GitHub link
            document.getElementById("preamble").innerHTML = preamble
            document.getElementById("text").innerHTML = "\n" + rendered;
            var currentConfig = Array.from(rows, function (row) { return row.value; });

            // Generate all possible configurations that deviate by zero or one option from the current configuration
            var possibleDeviatingConfigs = [];
            for (var i = 0; i < optionRows.length; i++) {
                var options = optionRows[i]['options'];
                for (var j = 0; j < options.length; j++) {
                    var option = options[j];
                    var deviation = currentConfig.slice();
                    deviation[i] = option;
                    possibleDeviatingConfigs.push(deviation);
                }
            }
            // Remove duplicates
            possibleDeviatingConfigs = possibleDeviatingConfigs.filter(function (config, index) {
                return possibleDeviatingConfigs.indexOf(config) === index;
            });

            // Find the invalid configurations that match the deviating configurations
            var deviatingConfigs = [];
            for (var i = 0; i < invalidConfigs.length; i++) {
                var config = invalidConfigs[i];
                if (possibleDeviatingConfigs.some(function (deviation) {
                    return deviation.every(function (value, index) {
                        return value === config[index];
                    });
                })) {
                    deviatingConfigs.push(config);
                }
            }
            // Track the one option that was the deviation for each deviating config
            var deviatingOptions = deviatingConfigs.map(function (config) {
                return config.filter(function (value, index) {
                    return value !== currentConfig[index];
                })[0];
            });

            // Check if the current configuration is invalid
            var isInvalid = invalidConfigs.some(function (config) {
                return config.every(function (value, index) {
                    return value === currentConfig[index];
                });
            });

            // If the current configuration is invalid, add all selected options to the list of deviatingOptions
            if (isInvalid) {
                deviatingOptions = deviatingOptions.concat(currentConfig);
            }

            // Logging (OK to comment out)
            console.group('Current Config');
            console.table(currentConfig);
            console.group('Deviations');
            console.group('Possible Deviating Configs');
            console.table(possibleDeviatingConfigs);
            console.groupEnd();
            console.group('Deviating Configs');
            console.table(deviatingConfigs);
            console.groupEnd();
            console.group('Deviating Options');
            console.table(deviatingOptions);
            console.groupEnd();
            console.groupEnd();

            // Add strikethrough for each deviating option
            deviatingOptions.forEach(function (option) {
                var label = document.querySelector('label[for="' + option + '"]');
                if (label) {
                    label.innerHTML = '<s>' + label.innerHTML + '</s>';
                }
            });
            Prism.highlightAll();
        }
    </script>
    <script src="_static/prism/prism.js"></script>
</body>

</html>

<!-- // Generate all possible configurations that deviate by zero or one option from the current configuration
// start with current config
var possibleDeviatingConfigs = [currentConfig.slice()]; -->
